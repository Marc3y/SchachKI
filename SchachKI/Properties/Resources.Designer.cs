//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchachKI.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SchachKI.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap background {
            get {
                object obj = ResourceManager.GetObject("background", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Du bist die Farbe {color} in einem Schachspiel. Ich werde dir immer wieder alle Z�ge auflisten, die bisher gespielt wurden, und du 
        ///sollst dann den n�chsten Zug machen.
        ///Es gibt 3 Schwierigkeiten: Easy, Normal und Hard.
        ///- Bei Easy spielst du so, dass der Gegner leicht gewinnen kann (aber nicht zu leicht).
        ///- Bei Normal spielst du so wie ein durchschnittlicher Schachspieler.
        ///- Bei Hard spielst du so gut du kannst.
        ///Du spielst auf Schwierigkeit {difficulty}.
        ///Achte au�erdem darauf, dass wenn du die Farbe s [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string instruction {
            get {
                return ResourceManager.GetString("instruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die bisherigen Z�ge im Format &lt;von&gt;&gt;&lt;nach&gt; findest du hier (falls leer, wurde noch kein Zug gespielt):
        ///{moves}
        ///
        ///Beispiel-Response von dir: 
        ///{
        ///	&quot;from&quot;: &quot;e2&quot;,
        ///	&quot;to&quot;: &quot;e4&quot;,
        ///	&quot;reason&quot;: &quot;Springer werden entwickelt und zentrale Felder werden kontrolliert.&quot;
        ///}
        ///
        ///Mache jetzt GENAU EINEN Schachzug. Dieser muss den allgemeinen Schachregeln entsprechen und darf kein illegaler Zug sein.
        ///Gib genau so ein JSON-Objekt zur�ck. Keine Liste, keine Optionen, keine mehrfachen Felder. Halte dich exakt an das Beispiel. ähnelt.
        /// </summary>
        internal static string prompt {
            get {
                return ResourceManager.GetString("prompt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] start_positions {
            get {
                object obj = ResourceManager.GetObject("start_positions", resourceCulture);
                return ((byte[])(obj));
            }
        }
    }
}
